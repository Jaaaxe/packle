import functools
import random
import time

class Timer:   
    def __init__(self, reps: int):
        self.reps = reps

    def __call__(self, fn):        
        @functools.wraps(fn)
        def inner(*args, **kwargs):
            total_elapsed = 0
            for i in range(self.reps):
                start = time.perf_counter()
                result = fn(*args, **kwargs)
                end = time.perf_counter()
                total_elapsed += (end - start)

            avg_run_time = total_elapsed / self.reps
            print(f'{fn.__name__} avg run time: {avg_run_time:.6f}s ({self.reps} reps)')
            return result
        return inner

@Timer(1)
def create_edges(nodes):
    source_list = []
    target_list = []
    for i in nodes:
        for j in nodes:
            rand = random.randint(1, 10)
            if rand == 1:
                source_list.append(i)
                target_list.append(j)

    return source_list, target_list

@Timer(1)
def create_edges_alt(nodes):
    target_list = []
    source_list = []
    sz = len(nodes) // 10
    for x in nodes:
        target_list.extend(random.sample(nodes, sz))
        source_list.extend([x] * sz)
    return source_list, target_list

s = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
s = s * 20
create_edges(s)
print()
create_edges_alt(s)
